--- ../src-base/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
+++ ../src-work/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -3,21 +3,24 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
+import it.unimi.dsi.fastutil.objects.*;
 import java.util.AbstractSet;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.locks.StampedLock;
 
 public class ClassInheritanceMultiMap<T> extends AbstractSet<T>
 {
-    private static final Set < Class<? >> ALL_KNOWN = Sets. < Class<? >> newHashSet();
-    private final Map < Class<?>, List<T >> map = Maps. < Class<?>, List<T >> newHashMap();
-    private final Set < Class<? >> knownKeys = Sets. < Class<? >> newIdentityHashSet();
+    // Forge: Use concurrent collection to allow creating chunks from multiple threads safely
+    private static final Set < Class<? >> ALL_KNOWN = Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap<Class<?>, Boolean>());
+    private final Map < Class<?>, List<T >> map = Maps.newConcurrentMap();
+    private final Set < Class<? >> knownKeys = ObjectSets.synchronize(new ObjectArraySet<>());
     private final Class<T> baseClass;
-    private final List<T> values = Lists.<T>newArrayList();
+    private final List<T> values = ObjectLists.synchronize(new ObjectArrayList<>());
+    private final StampedLock modificationLock = new StampedLock();
 
     public ClassInheritanceMultiMap(Class<T> baseClassIn)
     {
@@ -65,15 +68,20 @@
 
     public boolean add(T p_add_1_)
     {
-        for (Class<?> oclass : this.knownKeys)
-        {
-            if (oclass.isAssignableFrom(p_add_1_.getClass()))
+        final long stamp = this.modificationLock.writeLock();
+        try {
+            for (Class<?> oclass : this.knownKeys)
             {
-                this.addForClass(p_add_1_, oclass);
+                if (oclass.isAssignableFrom(p_add_1_.getClass()))
+                {
+                    this.addForClass(p_add_1_, oclass);
+                }
             }
-        }
 
-        return true;
+            return true;
+        }finally {
+            this.modificationLock.unlockWrite(stamp);
+        }
     }
 
     private void addForClass(T value, Class<?> parentClass)
@@ -82,7 +90,9 @@
 
         if (list == null)
         {
-            this.map.put(parentClass, Lists.newArrayList(value));
+            final List<T> newValue = ObjectLists.synchronize(new ObjectArrayList<>());
+            newValue.add(value);
+            this.map.put(parentClass,newValue);
         }
         else
         {
@@ -92,23 +102,28 @@
 
     public boolean remove(Object p_remove_1_)
     {
-        T t = (T)p_remove_1_;
-        boolean flag = false;
+        final long stamp = this.modificationLock.writeLock();
+        try {
+            T t = (T)p_remove_1_;
+            boolean flag = false;
 
-        for (Class<?> oclass : this.knownKeys)
-        {
-            if (oclass.isAssignableFrom(t.getClass()))
+            for (Class<?> oclass : this.knownKeys)
             {
-                List<T> list = (List)this.map.get(oclass);
-
-                if (list != null && list.remove(t))
+                if (oclass.isAssignableFrom(t.getClass()))
                 {
-                    flag = true;
+                    List<T> list = (List)this.map.get(oclass);
+
+                    if (list != null && list.remove(t))
+                    {
+                        flag = true;
+                    }
                 }
             }
-        }
 
-        return flag;
+            return flag;
+        }finally {
+            this.modificationLock.unlockWrite(stamp);
+        }
     }
 
     public boolean contains(Object p_contains_1_)
@@ -118,32 +133,41 @@
 
     public <S> Iterable<S> getByClass(final Class<S> clazz)
     {
-        return new Iterable<S>()
-        {
-            public Iterator<S> iterator()
-            {
-                List<T> list = (List)ClassInheritanceMultiMap.this.map.get(ClassInheritanceMultiMap.this.initializeClassLookup(clazz));
-
-                if (list == null)
-                {
-                    return Collections.<S>emptyIterator();
-                }
-                else
-                {
+        long stamp = this.modificationLock.readLock();
+        try{
+            return () -> {
+                // CatServer start - Optimization from Foamfix
+                Class c = ClassInheritanceMultiMap.this.initializeClassLookup(clazz);
+                List<T> list = ClassInheritanceMultiMap.this.map.get(c);
+                if (list == null) {
+                    return Collections.emptyIterator();
+                } else {
                     Iterator<T> iterator = list.iterator();
-                    return Iterators.filter(iterator, clazz);
+                    return clazz == c ? (Iterator<S>) iterator : Iterators.filter(iterator, clazz);
                 }
-            }
-        };
+            };
+        }finally {
+            this.modificationLock.unlockRead(stamp);
+        }
     }
 
     public Iterator<T> iterator()
     {
-        return (Iterator<T>)(this.values.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.values.iterator()));
+        final long stamp = this.modificationLock.readLock();
+        try{
+            return (Iterator<T>)(this.values.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.values.iterator()));
+        }finally {
+            this.modificationLock.unlockRead(stamp);
+        }
     }
 
     public int size()
     {
-        return this.values.size();
+        final long stamp = this.modificationLock.readLock();
+        try{
+            return this.values.size();
+        }finally {
+            this.modificationLock.unlockRead(stamp);
+        }
     }
 }
