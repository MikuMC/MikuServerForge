--- ../src-base/minecraft/net/minecraft/network/NetworkSystem.java
+++ ../src-work/minecraft/net/minecraft/network/NetworkSystem.java
@@ -27,16 +27,22 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectLists;
 import net.minecraft.client.network.NetHandlerHandshakeMemory;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
+import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.play.server.SPacketDisconnect;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.network.NetHandlerHandshakeTCP;
 import net.minecraft.util.LazyLoadBase;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.text.TextComponentString;
+import net.minecraft.world.WorldServer;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
@@ -49,27 +55,27 @@
     {
         protected NioEventLoopGroup load()
         {
-            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
         }
     };
     public static final LazyLoadBase<EpollEventLoopGroup> SERVER_EPOLL_EVENTLOOP = new LazyLoadBase<EpollEventLoopGroup>()
     {
         protected EpollEventLoopGroup load()
         {
-            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER).build());
         }
     };
     public static final LazyLoadBase<LocalEventLoopGroup> SERVER_LOCAL_EVENTLOOP = new LazyLoadBase<LocalEventLoopGroup>()
     {
         protected LocalEventLoopGroup load()
         {
-            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
+            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).setThreadFactory(net.minecraftforge.fml.common.thread.SidedThreadGroups.CLIENT).build());
         }
     };
     private final MinecraftServer mcServer;
     public volatile boolean isAlive;
     private final List<ChannelFuture> endpoints = Collections.<ChannelFuture>synchronizedList(Lists.newArrayList());
-    private final List<NetworkManager> networkManagers = Collections.<NetworkManager>synchronizedList(Lists.newArrayList());
+    private final List<NetworkManager> networkManagers = ObjectLists.synchronize(new ObjectArrayList<>());
 
     public NetworkSystem(MinecraftServer server)
     {
@@ -79,6 +85,7 @@
 
     public void addLanEndpoint(InetAddress address, int port) throws IOException
     {
+        if (address instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
         synchronized (this.endpoints)
         {
             Class <? extends ServerSocketChannel > oclass;
@@ -110,7 +117,7 @@
                         ;
                     }
 
-                    p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(NetworkSystem.this)).addLast("splitter", new NettyVarint21FrameDecoder()).addLast("decoder", new NettyPacketDecoder(EnumPacketDirection.SERVERBOUND)).addLast("prepender", new NettyVarint21FrameEncoder()).addLast("encoder", new NettyPacketEncoder(EnumPacketDirection.CLIENTBOUND));
+                    p_initChannel_1_.pipeline().addLast("timeout", new ReadTimeoutHandler(net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.READ_TIMEOUT)).addLast("legacy_query", new LegacyPingHandler(NetworkSystem.this)).addLast("splitter", new NettyVarint21FrameDecoder()).addLast("decoder", new NettyPacketDecoder(EnumPacketDirection.SERVERBOUND)).addLast("prepender", new NettyVarint21FrameEncoder()).addLast("encoder", new NettyPacketEncoder(EnumPacketDirection.CLIENTBOUND));
                     NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.SERVERBOUND);
                     NetworkSystem.this.networkManagers.add(networkmanager);
                     p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
@@ -160,59 +167,50 @@
         }
     }
 
-    public void networkTick()
-    {
-        synchronized (this.networkManagers)
+    public synchronized void tickSingle(NetworkManager networkmanager){
+        if (!networkmanager.isChannelOpen()){
+            if (!networkmanager.preparing){
+                this.networkManagers.remove(networkmanager);
+                networkmanager.checkDisconnected();
+            }
+            return;
+        }
+        try
         {
-            Iterator<NetworkManager> iterator = this.networkManagers.iterator();
+            networkmanager.processReceivedPackets();
+        }
+        catch (Exception exception)
+        {
+            LOGGER.warn("Failed to handle packet for {}", networkmanager.getRemoteAddress(), exception);
+            final TextComponentString textcomponentstring = new TextComponentString("Internal server error");
+            networkmanager.sendPacket(new SPacketDisconnect(textcomponentstring), p_operationComplete_1_ -> networkmanager.closeChannel(textcomponentstring));
+            networkmanager.disableAutoRead();
+        }
+    }
 
-            while (iterator.hasNext())
-            {
-                final NetworkManager networkmanager = iterator.next();
-
-                if (!networkmanager.hasNoChannel())
-                {
-                    if (networkmanager.isChannelOpen())
-                    {
-                        try
-                        {
-                            networkmanager.processReceivedPackets();
+    public void networkTick() {
+        // Spigot Start
+        // This prevents players from 'gaming' the server, and strategically relogging to increase their position in the tick order
+        if (org.spigotmc.SpigotConfig.playerShuffle > 0 && MinecraftServer.currentTick % org.spigotmc.SpigotConfig.playerShuffle == 0) {
+            Collections.shuffle(this.networkManagers);
+        }
+        // Spigot End
+        for (NetworkManager manager : this.networkManagers){
+            boolean flag = true;
+            for (WorldServer server : MinecraftServer.getServerInst().worlds){
+                for(EntityPlayer player : server.playerEntities){
+                    if (player instanceof EntityPlayerMP){
+                        final EntityPlayerMP playerMP = (EntityPlayerMP) player;
+                        if (playerMP.connection.netManager.equals(manager)){
+                            flag = false;
+                            break;
                         }
-                        catch (Exception exception)
-                        {
-                            if (networkmanager.isLocalChannel())
-                            {
-                                CrashReport crashreport = CrashReport.makeCrashReport(exception, "Ticking memory connection");
-                                CrashReportCategory crashreportcategory = crashreport.makeCategory("Ticking connection");
-                                crashreportcategory.addDetail("Connection", new ICrashReportDetail<String>()
-                                {
-                                    public String call() throws Exception
-                                    {
-                                        return networkmanager.toString();
-                                    }
-                                });
-                                throw new ReportedException(crashreport);
-                            }
-
-                            LOGGER.warn("Failed to handle packet for {}", networkmanager.getRemoteAddress(), exception);
-                            final TextComponentString textcomponentstring = new TextComponentString("Internal server error");
-                            networkmanager.sendPacket(new SPacketDisconnect(textcomponentstring), new GenericFutureListener < Future <? super Void >> ()
-                            {
-                                public void operationComplete(Future <? super Void > p_operationComplete_1_) throws Exception
-                                {
-                                    networkmanager.closeChannel(textcomponentstring);
-                                }
-                            });
-                            networkmanager.disableAutoRead();
-                        }
                     }
-                    else
-                    {
-                        iterator.remove();
-                        networkmanager.checkDisconnected();
-                    }
                 }
             }
+            if (flag){
+                this.tickSingle(manager);
+            }
         }
     }
 
